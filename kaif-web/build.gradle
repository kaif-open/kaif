buildscript {
    ext {
        springBootVersion = '2.2.1.RELEASE'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:2.7.1"
    }
}


apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // <-- add this to your build.gradle
apply plugin: "com.google.cloud.tools.jib"


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
sourceCompatibility = 11
targetCompatibility = 11

println "Using JDK: ${org.gradle.internal.jvm.Jvm.current()}"

/** spring boot begin **/
apply plugin: 'org.springframework.boot'

/********** Start of Node ************/
processResources.dependsOn ':kaif-fe:pubCleanBuild'
/********** End of Node **************/

processResources {

    //copy `build` folder to `static/web` (dart dist)
    from("../kaif-fe/build") {
        include("packages/**")
        include("main.dart.js")
        into "static/web"
    }
    //copy less css to `static/css/` ( <@spring.url> only process this css folder )
    from("../kaif-fe/build/less") {
        into "static/css"
    }
}

bootRun {
    doFirst {
        jvmArgs = ["-Dspring.profiles.active=dev"]
    }
}

springBoot {
    buildInfo()
}

/** spring boot end **/

/** dart configuration begin **/

bootJar.dependsOn ":kaif-fe:pubCleanBuild"

/** dart configuration end **/

bootJar {
    archivesBaseName = 'kaif-web'
    launchScript()
    //mainClass = 'io.kaif.Application'
}

dependencies {

    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-freemarker")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.8.0'

    compile("org.springframework.boot:spring-boot-starter-tomcat")

    compile('org.liquibase:liquibase-core')

    // compile("org.springframework.boot:spring-boot-starter-social-twitter")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    //upgrade spring should bound json-path version too
    testCompile('com.jayway.jsonpath:json-path:2.4.0')

    compile 'org.springframework.security:spring-security-crypto:5.1.6.RELEASE'

    compile('org.postgresql:postgresql:42.2.8') {
        exclude group: 'org.slf4j'
    }

    compile 'io.micrometer:micrometer-registry-prometheus'

    compile 'com.google.guava:guava:28.1-jre'

    // postgresql driver not better fit HikariCP
    // compile 'com.zaxxer:HikariCP:2.3.0'

    // note that guava depends on jsr305 1.3.9
    compile 'com.google.code.findbugs:jsr305:3.0.2'
    compile 'javax.inject:javax.inject:1'

    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.0'

    // webjars
    compile 'org.webjars:font-awesome:4.7.0'
    compile 'org.webjars:yui-pure:0.5.0'

    // aws will depends on jackson/joda/httpclient
    compile 'com.amazonaws:aws-java-sdk-ses:1.11.632'
    compile 'com.sun.mail:jakarta.mail:1.6.4'

    compile 'org.ocpsoft.prettytime:prettytime:4.0.2.Final'
    compile 'org.apache.commons:commons-math3:3.6.1'

    // rss
    compile 'com.rometools:rome:1.12.1'

    compile "io.springfox:springfox-swagger2:2.9.2"
    compile "io.springfox:springfox-swagger-ui:2.9.2"

}

def applicationVersion = {
    def specified = System.getProperty("applicationVersion")
    if (specified != null) {
        return specified
    }
    return 'release-' + new Date().format('yyMMdd-HHmm', TimeZone.getTimeZone("Asia/Taipei"))
}()

// use `../gradlew jibDockerBuild` to build docker image in local
// use `../gradlew jibBuildTar` to build at build/jib-image.tar
jib {
    from {
        image = "adoptopenjdk/openjdk11:latest"
    }

    def jsonKeyFile = System.getProperty("jib-json-key-file")
    if (jsonKeyFile == null) {
        allowInsecureRegistries = true
        to {
            image = "k3d-kaif-registry.localhost:5111/kaif/kaif-web"
            tags = ["latest"]
        }
    } else {
        to {
            image = 'gcr.io/kaif-id/kaif'
            tags = [applicationVersion]
            auth {
                username = '_json_key'
                password = file(jsonKeyFile).text
            }
        }

        println("push image with tag: ${applicationVersion}")
        new File(projectDir, "../kaif-deploy/kaif-prod/kaif-web-version.txt").text = applicationVersion
    }

    //you need additional env:
    //
    //   SPRING_PROFILES_ACTIVE=dev
    //   SPRING_PROFILES_ACTIVE=prod
    //
    // and optional
    //
    //   JAVA_TOOL_OPTIONS='-XX:MinRAMPercentage=60.0 -XX:MaxRAMPercentage=85.0'
    //
    container {
        jvmFlags = ['-Duser.language=en',
                    '-Duser.country=US',
                    '-Djava.awt.headless=true',
                    '-Dspring.jmx.enabled=false',
                    '-Dspring.devtools.restart.enabled=false',
                    '-Dspring.devtools.add-properties=false',
                    '-server',
                    '-XX:+UseContainerSupport',
                    '-XshowSettings:vm']

        mainClass = 'io.kaif.Application'

        /*
        args = ['some', 'args']
        ports = ['1000', '2000-2003/udp']
        labels = [key1:'value1', key2:'value2']
        format = 'OCI'
         */
    }
}
